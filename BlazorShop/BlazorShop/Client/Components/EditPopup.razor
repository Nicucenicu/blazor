@using BlazorShop.Shared
@using System.Reflection
@inject HttpClient Http
@inject IModalService modal

@{
	var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="table-responsive">
	<table class="table table-hover table-striped">
		<thead>
			<tr>
				<th>Name</th>
				<th>Price</th>
				<th>Stoc</th>
			</tr>
		</thead>
		<tbody>
			<DataRepeaterComponent Items="prods">
				<Row Context="prod">
					<tr>
						<td>
							<input type="text" class="form-control" value="@prod.Name" @onchange="@((ChangeEventArgs e) => Save(prod))" />
						</td>
						<td>
							<input type="number" class="form-control" value="@prod.Price" @onchange="@((ChangeEventArgs e) => Save(prod))" />
						</td>
						<td>
							<input type="number" class="form-control" value="@prod.Stoc" @onchange="@((ChangeEventArgs e) => Save(prod))" />
						</td>
					</tr>
				</Row>
			</DataRepeaterComponent>
		</tbody>
	</table>
</div>
<button @onclick="@(()=>modal.Show<AddPopup>("Add product"))">Add</button>

@code {
	private Product prod;
	private List<Product> prods;
	private Product newprod = new Product();

	[Parameter]
	public bool IsVisible { get; set; }

	[Parameter]
	public EventCallback<bool> IsVisibleChanged { get; set; }

	[Parameter]
	public string? HeaderText { get; set; }

	public void Show(string headerText = "")
	{
		HeaderText = headerText;
		IsVisible = true;
		StateHasChanged();
	}

	private void Close()
	{
		HeaderText = string.Empty;
		IsVisible = false;
		StateHasChanged();
	}
	private async Task Save(Product prod)
	{
		//PropertyInfo pinfo = typeof(Product).GetProperty(propField);
		//pinfo.SetValue(prod, e.Value);

		using (var msg = await Http.PutAsJsonAsync<Product>($"/api/products/{prod.Id}", prod))
		{
			if (msg.IsSuccessStatusCode)
			{
			}
			else
			{
				// DO SOMETHING
			}
		}
	}
}
