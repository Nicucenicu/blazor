@using BlazorShop.Shared
@inject HttpClient Http

@if (IsVisible)
{
    <div class="backgroundPopup">
        <div class="popupCreate">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <EditForm Model="@newprod" OnSubmit="Close">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="editform">
                        <p>
                            Name:
                            <InputText @bind-Value="newprod.Name" />
                        </p>
                        <p>
                            Description:
                            <InputText @bind-Value="newprod.Description" />
                        </p>
                        <p>
                            Price:
                            <InputNumber @bind-Value="newprod.Price" />
                        </p>
                        <p>
                            Stoc:
                            <InputNumber @bind-Value="newprod.Stoc" />
                        </p>
                        <p style="text-align-last:auto">
                            <InputFile OnChange="@((InputFileChangeEventArgs args) =>
                                   File(newprod ,args))" />
                            <div>
                                <img src="@newprod.ImageName" />

                            </div>

                        </p>
                    </div>
                    <button class="btn btn-success" @onclick="@(() => Add(newprod))">Save</button>
                    <button class="btn btn-primary" @onclick="@(() => Clear(newprod))">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public Product newprod { get; set; }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string HeaderText { get; set; }

    public void Show(string headerText = "")
    {
        HeaderText = headerText;
        IsVisible = true;
        StateHasChanged();

    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();

    }
    private async Task Add(Product product)
    {
        if (product.Id > 0)
        {
            await Http.PutAsJsonAsync<Product>($"/api/products/{product.Id}", product);
        }
        else
        {
            await Http.PostAsJsonAsync<Product>("/api/products", product);
        }
        await IsVisibleChanged.InvokeAsync();
        Clear(product);

    }
    private void Clear(Product product)
    {
        product.Id = 0;
        product.Name = product.Description = product.ImageName = "";
        product.Price = product.Stoc = null;
        Close();
    }
    private async Task File(Product product, InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        product.Image = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(product.Image);
        product.ImageName = $"data:{format};base64,{Convert.ToBase64String(product.Image)}";
    }

}