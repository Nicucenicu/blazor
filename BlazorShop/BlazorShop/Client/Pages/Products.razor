@page "/products"
@inject HttpClient Http
@using BlazorShop.Shared
@using BlazorShop.Client.Components

<h1>
    Products
    <button class="btn btn-success" style="float:right" @onclick="RedirectPage">Add product</button>

</h1>

<form onsubmit="return false;">
    <div class="input-group input-group-md mb-2">
        <span class="input-group-text">Search by Name</span>
        <input type="text" class="form-control" @bind-value="filter" />
        <button class="btn btn-primary" @onclick="Search">Search</button>
    </div>
</form>

<AddPopup newprod="prod" IsVisibleChanged="RefreshTable" @ref="popupRef" />

@if (prods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Stoc</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var prod in prods)
            {
                <tr>
                    <td>@prod.Name</td>
                    <td>@prod.Price</td>
                    <td>@prod.Stoc</td>
                    <td>
                        <button class="btn btn-success" style="background-color:darkred" @onclick="@(() => Delete(prod.Id))">Delete</button>
                        <button class="btn btn-success" @onclick="@(() => EditPage(prod))">Edit</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    private AddPopup popupRef;

    private void RedirectPage()
    {
        popupRef.Show("Add product");
    }
    private async Task EditPage(Product product)
    {
        prod = product;
        popupRef.Show("Edit product");
    }

    private List<Product> prods;
    private Product prod = new Product();
    private string filter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        prods = await Http.GetFromJsonAsync<List<Product>>("/api/products/list");
    }

    private async Task Search()
    {
        prods = await Http.GetFromJsonAsync<List<Product>>($"/api/products?Name={filter}");
    }
    private async Task GetById(int id)
    {
        prod = await Http.GetFromJsonAsync<Product>($"/api/products/{id}");
    }


    private async Task Delete(int id)
    {
        using (var msg = await Http.DeleteAsync($"/api/products/{id}"))
        {
            if (msg.IsSuccessStatusCode)
            {
                prods = prods.Where(x => x.Id != id).ToList();
            }
        }
    }
    private async Task RefreshTable()
    {
        prods = await Http.GetFromJsonAsync<List<Product>>("/api/products/list");
        StateHasChanged();

    }

}